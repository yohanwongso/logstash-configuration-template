######################################
## LOGSTASH CONFIGURATION TEMPLATE  ##
## Linux Audit Log to Elasticsearch ##
## Version 20230514                 ##
## Â© 2023 Yohan                     ##
######################################
## Tested on SOF-ELK v20230329      ##
######################################

input {
  file {
    ## (Mandatory) Define the file path, can use wildcard "*".
    path => "/mnt/hgfs/D/DFIR/Deep_Security_Agent (01 Mei 2023 - Now).csv"

    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  mutate {
    remove_field => [ "host", "@version" ]
  }

  grok {
    match => {
      "message" => [
        "^type=%{DATA:type} msg=audit\(%{DATA:epoch_timestamp}:%{DATA}\): %{DATA:[audit][full_message]}$"
      ]
    }
    tag_on_failure => [ "_grokparsefailure", "grok1_failure" ]
  }
  
  if [audit][full_message] {
    grok {
      match => {
        "[audit][full_message]" => [
          "^%{DATA:[_temp][kv1]} msg='%{DATA:[audit][msg]}'$"
        ]
      }
      tag_on_failure => [ "_grokparsefailure", "grok2_failure" ]
    }
    
    if [_temp][kv1] & [audit][msg] {
      kv {
        source => "[_temp][kv1]"
        target => "[audit]"
        field_split => " "
        value_split => "="
        tag_on_failure => [ "_kv_filter_error", "kv1_failure" ]
      }

      kv {
        source => "[audit][msg]"
        target => "[audit]"
        field_split => " "
        value_split => "="
        tag_on_failure => [ "_kv_filter_error", "kv2_failure" ]
      }
    }
    else if "grok2_failure" is in [tags] {
      kv {
        source => "[audit][full_message]"
        target => "[audit]"
        field_split => " "
        value_split => "="
        tag_on_failure => [ "_kv_filter_error", "kv3_failure" ]
      }
    }
  }
  
  date {
    match => [ "epoch_timestamp", "UNIX" ]
    timezone => "Asia/Jakarta"
  }
  
  mutate {
    remove_field => [ "_temp" ]
  }
  
  ## (Optional) Uncomment to add tags
  # mutate {
  #   add_tag => [ "tag1", "tag2" ]
  # }

  ## (Optional) Uncomment to add timestamp of the ingestion process by the Logstash.
  # ruby {
  #   code => "event.set('[event][ingested]' , Time.now.utc)"
  # }
}

output {
  ## Uncomment to push the result to Elasticsearch, define the hosts of the elasticsearch and the index name.
  # elasticsearch {
  #   hosts => "localhost:9200"
  #   index => "dfir-01-csv1"
  # }

  ## Uncomment to print out the result
  # stdout {}
}
